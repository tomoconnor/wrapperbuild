#!/usr/bin/env bash
if [ ! -d info ];then
	echo "You are not inside an Application or Application-wrapper directory"
	exit 1
fi

if [ -f ~/bin/build-deb ]; then
	echo "You still have an old version of build-deb in your ~/bin. Please delete it" # This is a throwback to the old mechanism, before wrapperbuild was deployed, itself, as a deb.
fi 

MY_CHECKSUM=$(md5sum ${0} |cut -f1 -d' ') #We're gonna compare the local build-deb to the master one, and use whichever is different.. This allows per-package customisation of build scripts.
LOCAL_CHECKSUM=$(md5sum info/bin/build-deb |cut -f1 -d' ')

if [[ $MY_CHECKSUM != $LOCAL_CHECKSUM ]]; then
	echo "Local build script differs from Master, using that instead."
	bash info/bin/build-deb #shell out to it
	exit $?
fi
#inside the info/ directory there's a bunch of metadata as files.  We can also pass stuff in as EnvVars, or off the command line.
if [ ! -f info/BUILD_VERSION ]; then
	# I _think_ this is how Jenkins is going to function
	if [ "$BUILD_VERSION" == "" ]; then
		echo "BUILD_VERSION:"
		read BUILD_VERSION
	else
		echo "building version $BUILD_VERSION"
	fi
fi

PACKAGE_NAME=`cat info/NAME`
PACKAGE_DESC=`cat info/DESCRIPTION`
PACKAGE_URL=`cat info/URL`
PACKAGE_VERS=`cat info/VERSION`
PACKAGE_MAINT=`cat info/MAINTAINER` # this goes into the iteration field as who built it, company, organisation, custom field.. etc

if [[ $PACKAGE_NAME == *wrapper* ]]; then
	PACKAGE_ARCH=`cat info/ARCH`
else
	PACKAGE_ARCH=`uname -m`
fi
PACKAGE_TARGET_PLATFORM=$( cat /etc/lsb-release |grep DISTRIB_CODENAME|cut -d'=' -f2) #On ubuntu, this will return "lucid,precise,oneiric" etc for whichever you've got. 
# This is used in the naming of the package below

#Jenkins uses build_number we use version..
if [ -z "$BUILD_NUMBER" ]
then 
	PACKAGE_BUILD_VERSION=`cat info/BUILD_VERSION`
else
	PACKAGE_BUILD_VERSION=$BUILD_NUMBER
fi

SRC_DIRS=$(ls -m src/|sed 's/,/ /g')

#There's probably a neater way to do this... But this handles the postinst/postrm / preinst/prerm includes which are stored in info/ as $PACKAGE_NAME.postinst, etc.

if [ -f info/$PACKAGE_NAME.postinst ]; then
	fpm -n $PACKAGE_NAME \
	   -v $PACKAGE_VERS \
	   -a $PACKAGE_ARCH \
	   -s dir \
	   -C src \
	   -t deb \
	   --post-install info/$PACKAGE_NAME.postinst \
	   --url "$PACKAGE_URL" \
	   --description "$PACKAGE_DESC" \
	   --iteration "${PACKAGE_MAINT}-$PACKAGE_TARGET_PLATFORM-r$PACKAGE_BUILD_VERSION" \
	   --replaces "$PACKAGE_NAME (<< $PACKAGE_VERS)" ${SRC_DIRS}

elif [ -f info/$PACKAGE_NAME.postrm ]; then

	fpm -n $PACKAGE_NAME \
	   -v $PACKAGE_VERS \
	   -a $PACKAGE_ARCH \
	   -s dir \
	   -C src \
	   -t deb \
	   --post-uninstall info/$PACKAGE_NAME.postrm \
	   --url "$PACKAGE_URL" \
	   --description "$PACKAGE_DESC" \
	   --iteration "${PACKAGE_MAINT}-$PACKAGE_TARGET_PLATFORM-r$PACKAGE_BUILD_VERSION" \
	   --replaces "$PACKAGE_NAME (<< $PACKAGE_VERS)" ${SRC_DIRS}

elif [ -f info/$PACKAGE_NAME.postrm ]; then
	if [ -f -f info/$PACKAGE_NAME.postinst ]; then
		fpm -n $PACKAGE_NAME \
		   -v $PACKAGE_VERS \
		   -a $PACKAGE_ARCH \
		   -s dir \
		   -C src \
		   -t deb \
		   --post-uninstall info/$PACKAGE_NAME.postrm \
		   --post-install info/$PACKAGE_NAME.postinst \
		   --url "$PACKAGE_URL" \
		   --description "$PACKAGE_DESC" \
		   --iteration "${PACKAGE_MAINT}-$PACKAGE_TARGET_PLATFORM-r$PACKAGE_BUILD_VERSION" \
		   --replaces "$PACKAGE_NAME (<< $PACKAGE_VERS)" ${SRC_DIRS}
	fi

else 
	fpm -n $PACKAGE_NAME \
	   -v $PACKAGE_VERS \
	   -a $PACKAGE_ARCH \
	   -s dir \
	   -C src \
	   -t deb \
	   --url "$PACKAGE_URL" \
	   --description "$PACKAGE_DESC" \
	   --iteration "${PACKAGE_MAINT}-$PACKAGE_TARGET_PLATFORM-r$PACKAGE_BUILD_VERSION" \
	   --replaces "$PACKAGE_NAME (<< $PACKAGE_VERS)" ${SRC_DIRS}
fi

echo `expr ${PACKAGE_BUILD_VERSION} + 1` > info/BUILD_VERSION #clever bit of code to increment the stored version number in the metadata file

exit ${PIPESTATUS[0]}
